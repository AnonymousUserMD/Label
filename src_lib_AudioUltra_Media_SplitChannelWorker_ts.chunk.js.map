{"version":3,"file":"src_lib_AudioUltra_Media_SplitChannelWorker_ts.chunk.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AASA;AAqnDA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;ACTA;AAEA;AACA;AACA;AAIA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA9CA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACVA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AENA;AACA;AACA;AACA","sources":["webpack://label-studio/./src/lib/AudioUltra/Common/Worker/index.ts","webpack://label-studio/./src/lib/AudioUltra/Media/SplitChannelWorker.ts","webpack://label-studio/webpack/bootstrap","webpack://label-studio/webpack/runtime/define property getters","webpack://label-studio/webpack/runtime/harmony module decorator","webpack://label-studio/webpack/runtime/hasOwnProperty shorthand","webpack://label-studio/webpack/runtime/make namespace object","webpack://label-studio/webpack/before-startup","webpack://label-studio/webpack/startup","webpack://label-studio/webpack/after-startup"],"sourcesContent":["type MessengerResponder = (result: Record<string, any>) => void;\r\n\r\ntype MessengerCallback = (data: any, storage: Record<string, any>, respond: MessengerResponder) => void;\r\n\r\ntype MessengerInput = {\r\n  compute: MessengerCallback,\r\n  precompute?: MessengerCallback,\r\n}\r\n\r\nexport class ComputeWorker {\r\n  private worker: Worker;\r\n\r\n  static Messenger = {\r\n    receive({\r\n      compute: computeCallback,\r\n      precompute: precomputeCallback,\r\n    }: MessengerInput) {\r\n      const storage: Record<string, any> = {};\r\n\r\n      const storeData = (e: MessageEvent) => {\r\n        Object.assign(storage, e.data.data);\r\n      };\r\n\r\n      const compute = (data: any, eventId: string) => {\r\n        const respond = (result: Record<string, any>) => {\r\n          self.postMessage({\r\n            result,\r\n            eventId,\r\n          });\r\n        };\r\n\r\n        computeCallback(data, storage, respond);\r\n      };\r\n\r\n      const precompute = (data: any) => {\r\n        precomputeCallback?.(data, storage, (result) => {\r\n          Object.assign(storage, result);\r\n        });\r\n      };\r\n\r\n      const getStorage = (eventId: string) => {\r\n        self.postMessage({\r\n          result: storage,\r\n          eventId,\r\n        });\r\n      };\r\n\r\n      self.addEventListener('message', (e) => {\r\n        if (!e.data) return;\r\n\r\n        const { data, type, eventId } = e.data;\r\n\r\n        switch (type) {\r\n          case 'compute': compute(data, eventId); break;\r\n          case 'precompute': precompute(data); break;\r\n          case 'store': storeData(e); break;\r\n          case 'getStorage': getStorage(eventId); break;\r\n        }\r\n      });\r\n    },\r\n  };\r\n\r\n  constructor(url: Worker) {\r\n    this.worker = url;\r\n  }\r\n\r\n  async compute(data: Record<string, any>) {\r\n    const result = await this.sendMessage(this.worker, {\r\n      data,\r\n      type: 'compute',\r\n    }, true);\r\n\r\n    return result?.data?.result?.data;\r\n  }\r\n\r\n  async precompute(data: Record<string, any>) {\r\n    await this.sendMessage(this.worker, {\r\n      data,\r\n      type: 'precompute',\r\n    });\r\n  }\r\n\r\n  async store(data: Record<string, any>) {\r\n    await this.sendMessage(this.worker, {\r\n      data,\r\n      type: 'store',\r\n    });\r\n  }\r\n\r\n  async getStorage() {\r\n    const response = await this.sendMessage(this.worker, {\r\n      type: 'getStorage',\r\n    }, true);\r\n\r\n    return response?.data?.result;\r\n  }\r\n\r\n  destroy() {\r\n    this.worker.terminate();\r\n  }\r\n\r\n  private sendMessage(worker: Worker, data: Record<string, any>, waitResponse = false) {\r\n    return new Promise<MessageEvent | undefined>((resolve) => {\r\n      const eventId = Math.random().toString();\r\n\r\n      if (waitResponse) {\r\n        const resolver = (e: MessageEvent) => {\r\n          if (eventId === e.data.eventId) {\r\n            worker.removeEventListener('message', resolver);\r\n            resolve(e);\r\n          }\r\n        };\r\n\r\n        worker.addEventListener('message', resolver);\r\n      }\r\n\r\n      worker.postMessage({ ...data, eventId });\r\n\r\n      if (!waitResponse) resolve(undefined);\r\n    });\r\n  }\r\n}\r\n","import { ComputeWorker } from '../Common/Worker';\r\n\r\nexport function splitChannels({\r\n  value,\r\n  channelCount,\r\n}: {\r\n  value: Float32Array,\r\n  channelCount: number,\r\n}) : Float32Array[] {\r\n  const channels: Float32Array[] = [];\r\n\r\n  // Create new Float32Array for each channel\r\n  for (let c = 0; c < channelCount; c++) {\r\n    channels[c] = new Float32Array(value.length / channelCount);\r\n  }\r\n\r\n  // Split the channels into separate Float32Array samples\r\n  for (let sample = 0; sample < value.length; sample++) {\r\n    // interleaved channels\r\n    // ie. 2 channels\r\n    // [channel1, channel2, channel1, channel2, ...]\r\n    const channel = sample % channelCount;\r\n    // index of the channel sample\r\n    // ie. 2 channels\r\n    // sample = 8, channel = 0, channelIndex = 4\r\n    // sample = 9, channel = 1, channelIndex = 4\r\n    // sample = 10, channel = 0, channelIndex = 5\r\n    // sample = 11, channel = 1, channelIndex = 5\r\n    const channelIndex = Math.floor(sample / channelCount);\r\n\r\n    channels[channel][channelIndex] = value[sample];\r\n  }\r\n\r\n  return channels;\r\n}\r\n\r\nComputeWorker.Messenger.receive({\r\n  compute: (data, _storage, respond) => {\r\n    respond({\r\n      data: splitChannels(data),\r\n    });\r\n  },\r\n\r\n  precompute: (data, _storage, respond) => {\r\n    respond({\r\n      data: splitChannels(data),\r\n    });\r\n  },\r\n});\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.hmd = (module) => {\n\tmodule = Object.create(module);\n\tif (!module.children) module.children = [];\n\tObject.defineProperty(module, 'exports', {\n\t\tenumerable: true,\n\t\tset: () => {\n\t\t\tthrow new Error('ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: ' + module.id);\n\t\t}\n\t});\n\treturn module;\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/lib/AudioUltra/Media/SplitChannelWorker.ts\");\n",""],"names":[],"sourceRoot":""}